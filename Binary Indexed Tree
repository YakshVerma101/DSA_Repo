import java.util.*;

// Trie Data Structure
class Trie {
    class TrieNode {
        Map<Character, TrieNode> children = new HashMap<>();
        boolean endOfWord;
    }

    private TrieNode root = new TrieNode();

    public void insert(String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            node = node.children.computeIfAbsent(ch, k -> new TrieNode());
        }
        node.endOfWord = true;
    }

    public boolean search(String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            if (!node.children.containsKey(ch)) return false;
            node = node.children.get(ch);
        }
        return node.endOfWord;
    }
}

// Segment Tree for Range Sum Query
class SegmentTree {
    private int[] tree;
    private int n;

    public SegmentTree(int[] nums) {
        n = nums.length;
        tree = new int[4 * n];
        buildTree(nums, 0, 0, n - 1);
    }

    private void buildTree(int[] nums, int index, int l, int r) {
        if (l == r) {
            tree[index] = nums[l];
            return;
        }
        int mid = (l + r) / 2;
        buildTree(nums, 2 * index + 1, l, mid);
        buildTree(nums, 2 * index + 2, mid + 1, r);
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
    }

    public int query(int left, int right) {
        return queryHelper(0, 0, n - 1, left, right);
    }

    private int queryHelper(int index, int l, int r, int left, int right) {
        if (l > right || r < left) return 0;
        if (l >= left && r <= right) return tree[index];
        int mid = (l + r) / 2;
        return queryHelper(2 * index + 1, l, mid, left, right) + queryHelper(2 * index + 2, mid + 1, r, left, right);
    }
}

// Dijkstra's Algorithm for Shortest Path in Graph
class Graph {
    private int V;
    private List<List<int[]>> adj;

    public Graph(int V) {
        this.V = V;
        adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
    }

    public void addEdge(int u, int v, int weight) {
        adj.get(u).add(new int[]{v, weight});
        adj.get(v).add(new int[]{u, weight});
    }

    public int[] dijkstra(int src) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        pq.add(new int[]{src, 0});

        while (!pq.isEmpty()) {
            int[] node = pq.poll();
            int u = node[0];
            int d = node[1];

            if (d > dist[u]) continue;

            for (int[] edge : adj.get(u)) {
                int v = edge[0], weight = edge[1];
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.add(new int[]{v, dist[v]});
                }
            }
        }
        return dist;
    }
}

// Binary Indexed Tree (Fenwick Tree) for Prefix Sum
class FenwickTree {
    private int[] tree;
    private int n;

    public FenwickTree(int size) {
        this.n = size;
        this.tree = new int[size + 1];
    }

    public void update(int index, int delta) {
        for (; index <= n; index += index & -index) {
            tree[index] += delta;
        }
    }

    public int query(int index) {
        int sum = 0;
        for (; index > 0; index -= index & -index) {
            sum += tree[index];
        }
        return sum;
    }

    public int rangeQuery(int left, int right) {
        return query(right) - query(left - 1);
    }
}

// BFS & DFS Traversal in Graph
class GraphTraversal {
    private int V;
    private List<List<Integer>> adj;

    public GraphTraversal(int V) {
        this.V = V;
        adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
    }

    public void addEdge(int u, int v) {
        adj.get(u).add(v);
        adj.get(v).add(u);
    }

    public void bfs(int start) {
        boolean[] visited = new boolean[V];
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        visited[start] = true;

        while (!queue.isEmpty()) {
            int node = queue.poll();
            System.out.print(node + " ");
            for (int neighbor : adj.get(node)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
        System.out.println();
    }

    public void dfs(int start) {
        boolean[] visited = new boolean[V];
        dfsHelper(start, visited);
        System.out.println();
    }

    private void dfsHelper(int node, boolean[] visited) {
        if (visited[node]) return;
        visited[node] = true;
        System.out.print(node + " ");
        for (int neighbor : adj.get(node)) {
            dfsHelper(neighbor, visited);
        }
    }
}

// Driver Class
public class DSAJava {
    public static void main(String[] args) {
        // Trie Usage
        Trie trie = new Trie();
        trie.insert("hello");
        trie.insert("world");
        System.out.println("Trie Search: " + trie.search("hello"));

        // Segment Tree Usage
        int[] nums = {1, 2, 3, 4, 5};
        SegmentTree segTree = new SegmentTree(nums);
        System.out.println("Segment Tree Query (1,3): " + segTree.query(1, 3));

        Graph graph = new Graph(5);
        graph.addEdge(0, 1, 10);
        graph.addEdge(0, 2, 3);
        graph.addEdge(1, 2, 1);
        graph.addEdge(2, 3, 8);
        graph.addEdge(3, 4, 2);
        System.out.println("Dijkstra Shortest Path from 0: " + Arrays.toString(graph.dijkstra(0)));

        FenwickTree fenwickTree = new FenwickTree(5);
        fenwickTree.update(1, 3);
        fenwickTree.update(2, 2);
        System.out.println("Fenwick Tree Query (1-2): " + fenwickTree.rangeQuery(1, 2));

        // Graph Traversal (BFS & DFS)
        GraphTraversal graphTraversal = new GraphTraversal(5);
        graphTraversal.addEdge(0, 1);
        graphTraversal.addEdge(0, 2);
        graphTraversal.addEdge(1, 3);
        graphTraversal.addEdge(2, 4);
        System.out.print("BFS Traversal: ");
        graphTraversal.bfs(0);
        System.out.print("DFS Traversal: ");
        graphTraversal.dfs(0);
    }
}
